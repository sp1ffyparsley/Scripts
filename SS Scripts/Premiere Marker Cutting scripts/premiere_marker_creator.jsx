// @target premierepro-24.0
/**
 * Reads a timestamps text file (generated by the SRT Censor tool) and creates
 * colour-coded markers at the matching timecodes in the active sequence.
 */

(function () {
    var TICKS_PER_SECOND = 254016000000;

    function exitWithError(message) {
        alert(message);
        throw new Error(message);
    }

    function secondsToTicks(seconds) {
        return Math.round(Number(seconds) * TICKS_PER_SECOND);
    }

    function parseTimestampsFile(file) {
        if (!file || !file.exists) {
            exitWithError("Timestamps file not found:\n" + (file ? file.fsName : "Unknown path"));
        }
        file.encoding = "UTF-8";
        if (!file.open("r")) {
            exitWithError("Unable to open timestamps file.");
        }

        var content = file.read();
        file.close();

        var lines = content.split(/\r?\n/);
        var entries = [];
        var current = null;

        for (var i = 0; i < lines.length; i += 1) {
            var line = lines[i].trim();
            if (!line) {
                continue;
            }
            if (line.indexOf("Start:") === 0) {
                if (current) {
                    entries.push(current);
                }
                current = { text: "", time: 0 };
                var timeStr = line.substring(6).trim();
                var parts = timeStr.split(":");
                if (parts.length === 3) {
                    var hours = Number(parts[0]);
                    var minutes = Number(parts[1]);
                    var seconds = Number(parts[2].replace(",", "."));
                    current.time = (hours * 3600) + (minutes * 60) + seconds;
                } else {
                    current.time = Number(timeStr) || 0;
                }
            } else if (line.indexOf("Text:") === 0) {
                if (current) {
                    current.text = line.substring(5).trim();
                }
            }
        }
        if (current) {
            entries.push(current);
        }
        return entries;
    }

    function clearMarkers(sequence) {
        if (!sequence || !sequence.markers) {
            return;
        }
        var markers = sequence.markers;
        var marker = markers.getFirstMarker();
        while (marker) {
            markers.deleteMarker(marker);
            marker = markers.getFirstMarker();
        }
    }

    function applyMarkers(sequence, entries) {
        if (!entries || !entries.length) {
            exitWithError("No valid timestamps were found in the selected file.");
        }
        var markers = sequence.markers;
        for (var i = 0; i < entries.length; i += 1) {
            var entry = entries[i];
            var ticks = secondsToTicks(entry.time);
            var marker = markers.createMarker(ticks);
            marker.name = entry.text ? ("Profanity: " + entry.text) : "Profanity";
            if (marker.setComment) {
                marker.setComment(entry.text || "");
            } else {
                marker.comments = entry.text || "";
            }
            if (typeof marker.setType === "function") {
                marker.setType(0); // comment marker
            }
            if (typeof marker.setColorByName === "function") {
                marker.setColorByName("Cerise Red");
            } else if (typeof marker.setColorByIndex === "function") {
                marker.setColorByIndex(2); // fall back to third colour slot (user can remap to red)
            }
        }
    }

    function main() {
        if (!app.project || !app.project.activeSequence) {
            exitWithError("Open a sequence before running the marker creator.");
            return;
        }
        var sequence = app.project.activeSequence;
        var timestampsFile = File.openDialog("Select the profanity timestamps file", "Text Files:*.txt");
        if (!timestampsFile) {
            exitWithError("No timestamps file selected.");
            return;
        }
        var entries = parseTimestampsFile(timestampsFile);
        if (!entries.length) {
            exitWithError("Unable to find any timestamps in " + timestampsFile.fsName);
            return;
        }

        clearMarkers(sequence);
        applyMarkers(sequence, entries);

        alert("Added " + entries.length + " profanity markers to the active sequence.");
    }

    main();
}());

